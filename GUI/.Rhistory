full <- lm(acc ~ . + .^2, data=bat)
fit2 <- step(null, scope=formula(full), direction='both', k=log(nrow(bat)), trace=0)
summary(fit2)
bat %>%
mutate(fitted = fit2$fitted.values) %>%
ggplot(aes(qtr, acc)) +
geom_line(aes(color = batmobile)) +
geom_line(aes(qtr, fitted))
formula(fit)
fuel
bat$fuel
bat$lag4
anova(fit, fit2)
library(tidyverse)
library(mclust)
data("banknote")
banknote %>%
select(-Status) %>%
GGally::ggpairs()
for(col in 2:6) {
k <- 2
reg.lm <- lm(banknote$Diagonal ~ banknote[, col])
z <- banknote$Diagonal > reg.lm$coef[1] + banknote[, col] * reg.lm$coef[2]
e <- list(z=cbind(z, 1-z), loglik = NA)
loglik <- NA
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
loglik <- c(loglik, e$loglik)
for(i in 1:15) {
## E-step
e <- estepVVV(data=banknote[, c(col, 7)], parameters=m$parameters)
## M-step
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
## Keep track of progress
loglik <- c(loglik, e$loglik)
}
par(mfrow=c(1,2))
mclust2Dplot(data=banknote[, c(col, 7)], parameters = m$parameters, z=e$z)
plot(loglik)
}
for(col in 2:6) {
k <- 2
reg.lm <- lm(banknote$Left ~ banknote$Right)
z <- banknote$Left > reg.lm$coef[1] + banknote$Right * reg.lm$coef[2]
e <- list(z=cbind(z, 1-z), loglik = NA)
loglik <- NA
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
loglik <- c(loglik, e$loglik)
for(i in 1:70) {
## E-step
e <- estepVVV(data=banknote[, c(col, 7)], parameters=m$parameters)
## M-step
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
## Keep track of progress
loglik <- c(loglik, e$loglik)
}
par(mfrow=c(1,2))
mclust2Dplot(data=banknote[, c(col, 7)], parameters = m$parameters, z=e$z)
plot(loglik)
}
loglik.k2 <- loglik
loglik <- NA
em.last.2 <- e
em.last.2$bic <- bic(modelName="VVV", em.last.2$loglik, em.last.2$n,
em.last.2$d, em.last.2$G)
for(col in 2:6) {
reg.lm <- lm(banknote$Diagonal ~ banknote[, col])
z <- banknote$Diagonal > reg.lm$coef[1] + banknote[, col] * reg.lm$coef[2]
#em.last.2 <- e
e <- list(z=cbind(em.last.2$z, z), loglik=NaN)
e$z[z,1:2] <- 0
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
loglik <- c(loglik, e$loglik)
par(mfrow=c(1,2))
mclust2Dplot(data=banknote[, c(col, 7)], parameters = m$parameters, z=e$z)
# plot(loglik)
}
for(i in 2:6) {
mod1 <- Mclust(banknote[,c(i,7)])
plot(mod1, what='classification')
}
mod1 <- MclustDA(banknote[,-1], banknote[,1])
unlist(cvMclustDA(mod1, nfold=30)[2:3])
for(col in 2:6) {
k <- 2
reg.lm <- lm(banknote$Diagonal ~ banknote[, col])
z <- banknote$Diagonal > reg.lm$coef[1] + banknote[, col] * reg.lm$coef[2]
e <- list(z=cbind(z, 1-z), loglik = NA)
loglik <- NA
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
loglik <- c(loglik, e$loglik)
for(i in 1:15) {
## E-step
e <- estepVVV(data=banknote[, c(col, 7)], parameters=m$parameters)
## M-step
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
## Keep track of progress
loglik <- c(loglik, e$loglik)
}
par(mfrow=c(1,2))
mclust2Dplot(data=banknote[, c(col, 7)], parameters = m$parameters, z=e$z)
plot(loglik)
}
loglik.k2 <- loglik
em.last.2 <- e
em.last.2$bic <- bic(modelName="VVV", em.last.2$loglik, em.last.2$n,
em.last.2$d, em.last.2$G)
e <- list(z=cbind(em.last.2$z, z), loglik=NaN)
e$z[z,1:2] <- 0
for(col in 2:6) {
reg.lm <- lm(banknote$Diagonal ~ banknote[, col])
z <- banknote$Diagonal > reg.lm$coef[1] + banknote[, col] * reg.lm$coef[2]
#em.last.2 <- e
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
loglik <- c(loglik, e$loglik)
par(mfrow=c(1,2))
mclust2Dplot(data=banknote[, c(col, 7)], parameters = m$parameters, z=e$z)
# plot(loglik)
}
for(col in 2:6) {
k <- 2
reg.lm <- lm(banknote$Diagonal ~ banknote[, col])
z <- banknote$Diagonal > reg.lm$coef[1] + banknote[, col] * reg.lm$coef[2]
e <- list(z=cbind(z, 1-z), loglik = NA)
loglik <- NA
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
loglik <- c(loglik, e$loglik)
for(i in 1:15) {
## E-step
e <- estepVVV(data=banknote[, c(col, 7)], parameters=m$parameters)
## M-step
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
## Keep track of progress
loglik <- c(loglik, e$loglik)
}
par(mfrow=c(1,2))
mclust2Dplot(data=banknote[, c(col, 7)], parameters = m$parameters, z=e$z)
plot(loglik)
}
loglik.k2 <- loglik
loglik <- NA
em.last.2 <- e
em.last.2$bic <- bic(modelName="VVV", em.last.2$loglik, em.last.2$n,
em.last.2$d, em.last.2$G)
e <- list(z=cbind(em.last.2$z, z), loglik=NaN)
e$z[z,1:2] <- 0
reg.lm <- lm(banknote$Diagonal ~ banknote[, col])
z <- banknote$Diagonal > reg.lm$coef[1] + banknote[, col] * reg.lm$coef[2]
for(col in 2:6) {
e <- estepVVV(data=banknote[, c(col, 7)], parameters=m$parameters)
#em.last.2 <- e
m <- mstepVVV(data=banknote[, c(col, 7)], z=e$z)
loglik <- c(loglik, e$loglik)
par(mfrow=c(1,2))
mclust2Dplot(data=banknote[, c(col, 7)], parameters = m$parameters, z=e$z)
# plot(loglik)
}
'carl'
'carl'
'carl' < 'chris'
'carl' > 'chris'
import numpy as np
?strsplit
x = "Hello world, my name is brian"
paste(rev(strsplit(x, ' ')))
strsplit(x, ' ')
rev(1:4)
rev(strsplit(x, ' '))
rev(strsplit(x, ' ')[1])
rev(strsplit(x, ' ')[[1]])
paste(rev(strsplit(x, ' ')[[1]]))
?paste
paste(rev(strsplit(x, ' ')[[1]]), ' ')
paste(rev(strsplit(x, ' ')[[1]]), collapse = ' ')
x="Hello world!"
paste(strsplit(x, NULL)[[1]], collapse = ' ')
paste(rev(strsplit(x, NULL)[[1]]), collapse = '')
x = 'hello world'
paste(rev(strsplit(x, NULL)[[1]]), collapse='')
for i in 1:100 {
for (i in 1:100) {
print(i)
}
x = []
x = c()
for (i in 1:100) {
x[i] = i **2
}
x
?append
x = c()
for (i in 1:100) {
if(i%2==0){
i
i%2
i/2
i//2
of
x = c()
for (i in 1:100) {
if(i%%2==0){
x = append(x, i**2)
}
}
x
?ifelse
x <- 1:5
y<- 10:15
if(x>2&y<13, 2, x)
ifelse(x>2&y<13, 2, x)
y<- 11:15
ifelse(x>2&y<13, 2, x)
ifelse(x>2&y<13, 2, 0)
ifelse(x>1&y<13, 2, 0)
1==NA
is.na((NA,NA, 1))
x = (NA, 1, NA)
x = c(NA, 1, NA)
is.na(x)
?which
solve
View(solve())
View(solve)
source('~/.active-rstudio-document')
gc()
rm(list=ls())
gc()
start <- proc.time()
x <- c()
for (i in 1:1e7){
x[i] <- 17
}
end <- proc.time()
end - start
start <- proc.time()
x <- c()
for (i in 1:1e7){
x[i] <- i
}
end <- proc.time()
end - start
start <- proc.time()
x <- c()
for (i in 1:1e7){
x[i] <- 1e8
}
end <- proc.time()
end - start
start <- proc.time()
x <- c()
for (i in 1:1e7){
x[i] <- 1e8*i
}
end <- proc.time()
end - start
start <- proc.time()
x <- rep(NA, 1e7)
for (i in 1:1e7){
x[i] <- 1e8*i
}
end <- proc.time()
end - start
start <- proc.time()
x <- c()
for (i in 1:1e7){
x[i] <- 1e8*i
}
end <- proc.time()
end - start
start <- proc.time()
x <- rep(NA, 1e7)
for (i in 1:1e7){
x[i] <- 1e8*i
}
end <- proc.time()
end - start
?stopifnot
stopifnot(1==2)
?match
library(tidyverse)
?read_lines_chunked()
ls
ls()
getpwd()
pwd()
pwd
getpwd
read_csv_chunked('vars.csv')
read_csv_chunked('vars.csv', ListCallback$new(f))
read_csv_chunked('vars.csv', str
)
read_csv_chunked('vars.csv', $x1)
read_lines_chunked('vars.csv', function(pos) print(pos))
f <- function(x, pos){print(x + pos)}
read_lines_chunked('vars.csv', ListCallback$new(f)
)
f <- function(x, pos){print(pos)}
read_lines_chunked('vars.csv', ListCallback$new(f))
f <- function(x, pos){print(x)}
read_lines_chunked('vars.csv', ListCallback$new(f))
?gsub
f <- function(x, pos){print(x, pos)}
read_lines_chunked('vars.csv', ListCallback$new(f))
f <- function(x, pos){print(x, pos)}
read_lines_chunked('vars.csv', ListCallback$new(f))
f <- function(x, pos){print(pos)}
read_lines_chunked('vars.csv', ListCallback$new(f))
f <- function(x, pos){print(pos[1])}
read_lines_chunked('vars.csv', ListCallback$new(f))
read_lines_chunked('vars.csv', print(x, pos)
)
?append
temp <- c()
read_lines_chunked('vars.csv', temp.append(x))
f <- function(x, pos){temp.append(x)}
read_lines_chunked('vars.csv', ListCallback$new(f))
f <- function(x, pos){temp <- temp + x}
read_lines_chunked('vars.csv', ListCallback$new(f))
banknote
names(banknote)
names(banknote)[2]
?rename
colnames(banknote)
colnames(banknote) <- c('hi')
banknote
names(banknote) <- 'hi'
banknote
names(banknote) <- 'bye'
head(banknote)
?chartr
x <- c('hi', 'bye')
as.numeric(as.factor(x))
as.numeric(x)
?map
library(tidyverse)
?map
?relevel
?recode
?map
?mutate_each
?table
normality_plot <- function(datapoints) {
hist(datapoints,freq = F)
curve(dnorm(x, mean = mean(datapoints), sd = sd(datapoints)), add=TRUE, col = "darkblue",lwd=3)
}
data <- rnorm(20, mean=10, sd=5)
normality_plot(data)
data <- rnorm(20, mean=10, sd=.5)
normality_plot(data)
data <- rnorm(20, mean=10, sd=.005)
normality_plot(data)
data <- rnorm(20, mean=10, sd=.05)
normality_plot(data)
data <- rnorm(20, mean=10, sd=.2)
normality_plot(data)
normality_plot <- function(datapoints) {
hist(datapoints,freq = T)
curve(dnorm(x, mean = mean(datapoints), sd = sd(datapoints)), add=TRUE, col = "darkblue",lwd=3)
}
data <- rnorm(20, mean=10, sd=.2)
normality_plot(data)
normality_plot <- function(datapoints) {
hist(datapoints,freq = F)
curve(dnorm(x, mean = mean(datapoints), sd = sd(datapoints)), add=TRUE, col = "darkblue",lwd=3)
}
data <- rnorm(20, mean=10, sd=.2)
normality_plot(data)
data <- rnorm(20, mean=10, sd=.2)
normality_plot(data)
data <- rnorm(20, mean=10, sd=.2)
normality_plot(data)
data <- rnorm(2000, mean=10, sd=.2)
normality_plot(data)
data <- rnorm(200000, mean=10, sd=.2)
normality_plot(data)
library(tidytext)
library(tidyr)
library(plyr)
library(dplyr)
library(stringr)
library(gutenbergr)
library(ggplot2)
library(SnowballC)
library(reshape)
install.packages('tidytext')
install.packages("gutenbergr")
library(tidytext)
library(tidyr)
library(plyr)
library(dplyr)
library(stringr)
library(gutenbergr)
library(ggplot2)
library(SnowballC)
library(reshape)
frank <- gutenberg_download(84)
frank_chp <- frank %>%
mutate(linenumber = row_number(),
chapter = cumsum(str_detect(text, regex("^chapter [\\divxlc]",
ignore_case = TRUE))))
tidy_frank <- frank_chp %>%
unnest_tokens(word, text)
frank_freq <- tidy_frank %>%
anti_join(stop_words) %>%
count(word, chapter, sort = TRUE)
frank_rel <- 100*(frank_freq[,3]/sum(frank_freq[,3]))
frank_all <- cbind(frank_freq,frank_rel)
frank_all_heads<- colnames(frank_all) <- c("word", "chapter", "raw", "rel")
frank_creature <- subset(frank_all, word == "creature")
frank_monster <- subset(frank_all, word == "monster")
frank_comb <- rbind.fill(frank_creature[c("word", "chapter", "rel")], frank_monster[c("word", "chapter", "rel")])
test_plot <- ggplot(frank_comb, aes(x=chapter)) +
geom_density(aes(group=word, colour=word, fill=word), alpha=0.6) +
scale_color_manual(values = c("#852a02 ", "#852a02 ")) +
scale_fill_manual(values = c("#d69c42 ", "#77ae80 ")) +
theme_classic() +
theme(axis.line = element_line(size = 0)) +
theme(panel.grid.major = element_line(size = .2, color = "grey80", linetype = "dashed")) +
scale_x_continuous(breaks = seq(0,24, by = 1)) +
xlab("Chapters") +
ylab("Relative Word Frequency") +
ggtitle("'Creature' vs. 'Monster' in Frankenstein") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = c(0.9, 0.1)) +
theme(legend.title=element_blank())
test_plot
test_plot <- ggplot(frank_comb, aes(x=chapter)) +
geom_density(aes(group=word, colour=word, fill=word), alpha=0.6) +
#scale_color_manual(values = c("#852a02 ", "#852a02 ")) +
# scale_fill_manual(values = c("#d69c42 ", "#77ae80 ")) +
theme_classic() +
theme(axis.line = element_line(size = 0)) +
theme(panel.grid.major = element_line(size = .2, color = "grey80", linetype = "dashed")) +
scale_x_continuous(breaks = seq(0,24, by = 1)) +
xlab("Chapters") +
ylab("Relative Word Frequency") +
ggtitle("'Creature' vs. 'Monster' in Frankenstein") +
theme(plot.title = element_text(hjust = 0.5)) +
theme(legend.position = c(0.9, 0.1)) +
theme(legend.title=element_blank())
test_plot
T
lambda = 2*900/4
lambda*1184.9/(1184.9-lambda)
1184.9/(lambda*(1184.9-lambda))
1184.9/(lambda*(1184.9-lambda))*60*60
1184.9/(lambda*(1184.9-lambda))
.00358*60*60
ub
ub = 1184.9
lambda*ub/(ub-lamda)-1/2500
lambda*ub/(ub-lambda)-1/2500
ub/lambda*(ub-lambda)-1/2500
ub/(lambda*(ub-lambda))-1/2500
library(tidyverse)
run1 <- read.csv("C:/Users/btyuh/Desktop/run_logs_1542163601.7304153-tag-loss.csv")
run2 <- read.csv("C:/Users/btyuh/Desktop/run_logs_1542236581.918584-tag-loss.csv")
run3 <- read.csv("C:/Users/btyuh/Desktop/run_logs_1542247178.1724603-tag-loss.csv")
run4 <- read.csv("C:/Users/btyuh/Desktop/run_logs_1542311174.5235934-tag-loss.csv")
run1
ggplot(run1, aes(x=Step, y=Value)) +
geom_scatter()
ggplot(run1, aes(x=Step, y=Value)) +
geom_scatter()
source('~/.active-rstudio-document')
ggplot(run1, aes(x=Step, y=Value)) +
geom_point()
ggplot(run1, aes(x=Step, y=Value)) +
geom_point()
ggplot(run1, aes(x=Step, y=Value)) +
geom_line()
ggplot(run1, aes(x=Step, y=Value)) +
geom_line()
?geom_line
ggplot(run1, aes(x=Step, y=Value)) +
geom_line(c='blue')
ggplot(run1, aes(x=Step, y=Value)) +
geom_line(c='blue')
ggplot(run1, aes(x=Step, y=Value)) +
geom_line(color='blue')
ggplot(run1, aes(x=Step, y=Value)) +
geom_line(color='blue', size=3)
ggplot(run1, aes(x=Step, y=Value)) +
geom_line(color='blue', size=2)
ggplot(run1, aes(x=Step, y=Value)) +
geom_line(color='blue', size=1.5)
ggplot(run1, aes(x=Step, y=Value)) +
geom_line(color='blue', size=1.5) +
geom_line(aes(x=run2$Step, y=run2$Value), color='red', size=1.5)
?geom_line
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
runApp()
runApp('~/Skynet/GUI')
runApp('~/Skynet/GUI')
getwd()
setwd("~/Skynet/GUI")
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?radioButtons
runApp()
